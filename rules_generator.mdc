---
alwaysApply: false
---
# 项目规则生成器

## 触发机制
- 当用户通过`@rules_generator.mdc`显式引用此规则时被触发
- 触发后，分析当前项目结构和主要文件内容，收集项目特征
- 根据项目特征和用户需求，生成适合的项目规则文件

## 规则生成框架

### 项目理解部分
- 自动分析项目文件结构和主要功能模块
- 识别项目使用的框架和技术栈
- 理解项目的业务领域和核心功能
- 归纳项目的架构特点和设计模式

### 解答问题前提部分
- 生成上下文理解和需求分析的规则
- 生成需求理解与复述的规则
- 确定代码修改的全局考量规则
- 构建多文件修改时的规划和沟通规则
- 制定问题整体解决的方法论规则

### 禁止事项部分
- 定义复杂修改的处理规范
- 规定问题解决的全面性要求
- 明确可能导致项目风险的操作限制

### 代码质量保障部分
- 自动检测项目的代码风格并生成相应规则
- 针对项目特性制定性能优化规则
- 设定安全性和兼容性的考量规则

### 问题解决与代码优化部分
- 生成问题解决阶段的优先级规则
- 制定代码优化阶段的执行规范
- 确定优化原则和代码质量要求
- 建立问题解决到代码优化的完整流程

### 文档与注释部分
- 确定代码注释的规范和要求
- 设定修改说明的格式和内容要求

## 生成步骤
1. 扫描项目结构，识别关键文件和目录
2. 分析package.json了解依赖和技术栈
3. 检查README.md和文档，了解项目目的和功能
4. 根据项目特征调整规则模板
5. 分析项目的问题解决模式，生成问题解决与代码优化规则
6. 根据项目复杂度确定优化原则和代码简化要求
7. 在生成的project_rules.mdc文件开头添加YAML front matter，确保设置alwaysApply: true：
   ```
   ---
   alwaysApply: true
   ---
   ```
8. 生成最终的项目规则文件到.cursor/rules/project-rules.mdc

## 更新机制
- 当项目结构或核心功能发生重大变化时，触发规则更新
- 根据用户反馈和实际使用情况，优化和调整规则内容
- 保留用户自定义的规则部分，仅更新自动生成的部分